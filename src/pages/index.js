import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { colors } from "../assets/data/colors";
import { ImFolderUpload, ImFolderDownload } from "react-icons/im";
import Button from "../components/common/Button";
import axios from "axios";

export default function Home() {
  const [selectedColor, setSelectedColor] = useState("#FFFFFF");
  const [svgData, setSvgData] = useState("");
  const artRef = useRef(null);

  const updateColor = (element, color) => {
    element.setAttribute("fill", color ? color : selectedColor);
  };

  const getSvgAndAddEventListeners = async () => {
    try {
      const { data } = await axios.get(
        `https://s3-us-west-2.amazonaws.com/s.cdpn.io/40041/cheshire.svg`
      );
      setSvgData(data);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    getSvgAndAddEventListeners();
  }, []);
  useEffect(() => {
    const paths = document.getElementsByTagName("path");
    for (let i = 0; i < paths?.length; i++) {
      paths[i].classList.add("cursor-pointer");
      paths[i].addEventListener("click", () => {
        updateColor(paths[i]);
      });
    }
    return () => {
      for (let i = 0; i < paths?.length; i++) {
        paths[i].removeEventListener("click", () => {
          console.log(paths[i], "remove");
        });
      }
    };
  }, [artRef.current, selectedColor]);

  const fillWithRandomColors = () => {
    const paths = document.getElementsByTagName("path");
    for (let i = 0; i < paths?.length; i++) {
      var randomNum = Math.floor(Math.random() * colors.length + 1);
      updateColor(paths[i], colors[randomNum]);
    }
  };
  const clearColors = () => {
    const paths = document.getElementsByTagName("path");
    for (let i = 0; i < paths?.length; i++) {
      updateColor(paths[i], "#FFFFFF");
    }
  };

  const downloadSvg = () => {
    const svgInfo = new XMLSerializer().serializeToString(
      document.querySelector("svg")
    );
    const base64Data = btoa(svgInfo);
    let download = document.createElement("a");
    document.body.appendChild(download);
    download.setAttribute("href", "data:image/svg+xml;base64," + base64Data);
    download.setAttribute("download", "coloring_book.svg");
    download.click();
  };
  const handleUpload = (event) => {
    let file = event.target.files[0];
    var fr = new FileReader();
    fr.onload = function () {
      setSvgData(fr.result);
    };
    fr.readAsText(file);
  };
  return (
    <div>
      <Head>
        <title>Coloring Book</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative overflow-hidden min-h-[90vh] mb-20">
        <div
          id="art"
          className="flex flex-row justify-center"
          dangerouslySetInnerHTML={{ __html: svgData }}
          ref={artRef}
        ></div>
        <div className="w-full flex flex-row justify-center  items-center">
          <div className="flex flex-col absolute -bottom-[390px] hover:bottom-0 self-center w-[525px]  duration-500 transition-all rounded-md bg-gray-500">
            <div
              className="bg-white text-black border border-black font-bold text-center py-2 my-2 px-3 mx-3 rounded-lg"
              style={{ backgroundColor: selectedColor }}
            >
              SELECT COLOR
            </div>
            <div className="flex flex-row flex-wrap justify-start gap-4 px-3 py-2 mx-3">
              {colors.map((color, idx) => (
                <div
                  key={idx}
                  onClick={() => setSelectedColor(color)}
                  className="h-10 w-10 rounded-md shadow-md cursor-pointer hover:border hover:border-white"
                  style={{ backgroundColor: color }}
                ></div>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div className="md:flex hidden flex-row gap-4 justify-center m-4">
        <Button text="Clear Color" onClick={clearColors} />
        <Button text="Random Color" onClick={fillWithRandomColors} />
        <label htmlFor="uploadIp">
          <div className="border-none flex items-center gap-2 min-w-max  cursor-pointer rounded  bg-gray-900 text-white font-semibold px-5 py-3">
            <ImFolderUpload color="#fff" />
            <div>Upload</div>
          </div>
        </label>
        <Button text="Download Svg" onClick={downloadSvg} />
      </div>
      <input
        type="file"
        accept=".svg"
        id="uploadIp"
        onChange={handleUpload}
        name="uploadIp"
        className="hidden"
      />
      <div className="flex md:hidden bg-black py-4 fixed bottom-0 left-0 px-6 w-full justify-between">
        <div
          className="text-white cursor-pointer bg-gray-500 p-2 rounded"
          onClick={clearColors}
        >
          clear
        </div>
        <div
          className="text-white cursor-pointer bg-gray-500 p-2 rounded"
          onClick={fillWithRandomColors}
        >
          random
        </div>
        <label
          htmlFor="uploadIp"
          className="text-white cursor-pointer flex items-center gap-2 bg-gray-500 p-2 rounded"
        >
          <ImFolderUpload color="#fff" />
          <div>upload</div>
        </label>
        <div
          onClick={downloadSvg}
          className="text-white cursor-pointer flex items-center gap-2 bg-gray-500 p-2 rounded"
        >
          <ImFolderDownload color="#FFFFFF" />
          <div>download</div>
        </div>
      </div>
    </div>
  );
}
