import React, { useEffect, useMemo, useState } from "react";
import Head from "next/head";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from "firebase/auth";
// import { collection, addDoc, getFirestore } from "firebase/firestore";
import { app } from "./_app";
import { toast } from "react-toastify";
import { useRouter } from "next/router";

const LoginPage = () => {
  const [login, setLogin] = useState(true);
  const router = useRouter();
  //   const db = getFirestore(app);
  const toggleLogin = () => setLogin((login) => !login);
  const auth = useMemo(() => getAuth());
  const [values, setValues] = useState({
    email: "",
    password: "",
  });
  const [user, setUser] = useState(null);

  const { email, password } = values;

  const changeHandler = (e) => {
    setValues((prevState) => ({
      ...prevState,
      [e.target.name]: e.target.value,
    }));
  };
  useEffect(() => {
    let user = JSON.parse(localStorage.getItem("auth"));
    if (user?.accessToken) {
      router.replace("/");
    }
  }, [user]);
  const submitHandler = async (e) => {
    e.preventDefault();
    try {
      if (login) {
        const { user } = await signInWithEmailAndPassword(
          auth,
          email,
          password
        );
        toast.success(`Welcome, ${email}`);

        localStorage.setItem(
          "auth",
          JSON.stringify({
            accessToken: user.accessToken,
            email: user.email,
          })
        );
        setUser({
          accessToken: user.accessToken,
          email: user.email,
        });
      } else {
        const { user } = await createUserWithEmailAndPassword(
          auth,
          email,
          password
        );
        toast.success(`Account created successfully`);

        localStorage.setItem(
          "auth",
          JSON.stringify({
            accessToken: user.accessToken,
            email: user.email,
          })
        );
      }
    } catch (error) {
      console.log(error);
      toast.error(error.code.split("/")[1]?.split("-")?.join(" "));
    }
  };
  return (
    <>
      <Head>
        <title>Coloring Book | Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-row justify-center">
        <form
          onSubmit={submitHandler}
          className="flex mt-36 flex-col mx-4 md:mx-0 w-full md:w-1/3 border p-4 gap-5 shadow-md rounded-md"
        >
          <div className="text-2xl">{login ? "LOGIN" : "SIGNUP"}</div>
          <input
            type="email"
            name="email"
            required
            value={email}
            onChange={changeHandler}
            className="w-full outline-none border border-gray-400 p-2 rounded"
            placeholder="Enter Your Email"
          />
          <input
            type="password"
            name="password"
            required
            value={password}
            onChange={changeHandler}
            className="w-full outline-none border border-gray-400 p-2 rounded"
            placeholder="Enter Password"
          />
          <button
            type="submit"
            className="w-full border-none bg-blue-500 text-white rounded font-semibold text-base px-4 py-2"
          >
            {login ? "LOGIN" : "SIGNUP"}
          </button>
          <div
            className="text-blue-400 text-sm cursor-pointer"
            onClick={toggleLogin}
          >
            {login ? "Don't" : "Already"} have an Account?{" "}
            {login ? "Signup" : "Login"} now
          </div>
        </form>
      </div>
    </>
  );
};

export default LoginPage;
